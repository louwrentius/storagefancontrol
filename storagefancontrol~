#!/usr/bin/python
"""
This program controls the chassis fan speed through PWM based on the temperature
of the hottest hard drive in the chassis.
"""
import os
import sys
import subprocess
import re
import time
import syslog


class FanControl:
    """ Class containing all controll logic.
    """

    temp = []
    megacli = "/opt/MegaRAID/MegaCli/megacli"
    threshold_temperature = 40
    lower_margin = 2
    polling_interval = 90
    pwm_max = 220
    pwm_min = 130
    pwm_default = 130
    pwm_min_delta = 5
    pwm_max_delta = 40
    pwm_safety = 160
    previous_temperature = None
    enablefan = '/sys/class/hwmon/hwmon2/device/pwm2_enable'
    controlfan = '/sys/class/hwmon/hwmon2/device/pwm2'
    ports_per_controller = 8 
    debug = False
    temp_generator = None

    def __init__(self):
        pass

    def log(self, message, variable=None):
        """
        Logs messages to syslog. Logs to screen if 'debug' is given as the
        first argument to the executable.
        """
        if variable is None:
            message = message
        else:
            message = message + ": " + str(variable)
        syslog.syslog(message)
        if self.debug:
            print message

    def number_of_controllers(self):
        """
        Get the number of LSI HBAs on the system.
        In my case, I have 3 controllers with 8 drives each.
        """
        rawdata = subprocess.Popen(\
            [self.megacli,'-cfgdsply','-aALL'],\
             stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0]
        regex = re.compile('Adapter:.*')
        match = regex.findall(rawdata)
        return len(match)

    def get_drive_temp(self, controller, port):
        """
        Get the temperature from an individual drive through the megacli
        utility. The return value is a positive integer that specifies the
        temperature in Celcius.
        """
        rawdata =  subprocess.Popen(\
            [self.megacli,  '-pdinfo', '-physdrv', '[64:' +\
               str(port) +']', '-a' + str(controller)],\
               stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0] 

        regex = re.compile('Drive Temperature :(.*)')
        match = regex.search(rawdata)
        try:
            temp = match.group(1).split("C")[0]

            # Ugly hack: issue with some old WD drives
            # Controller reports 65C for them.
            if temp == "N/A":
                temp = "?"
            if int(temp) >= 60:
                temp = "?"
            return temp
            
        except(AttributeError):
            return ""
        except(IndexError):
            return ""

    def fetch_data(self):
        """
        Returns a two-dimentional list containing
        the temperature of each drive. The first dimension is the 
        controller. The second dimension is the drive.
        """

        drivearray = \
             [[0 for x in xrange(self.ports_per_controller)]\
                for x in xrange(self.number_of_controllers())]
            
        for controller in xrange(self.number_of_controllers()):
            for port in xrange(self.ports_per_controller):
                disk = self.get_drive_temp(controller, port)
                if len(disk) == 0:
                    disk = ""
                drivearray[controller][port] = disk

        return drivearray

    def generate_temperature(self):
        """ Generates temperatures for testing """
        temprange = [35, 36, 37, 38, 39, 40, 41, 42, 43, 43, 43, 42, 42, 41, \
                41, 40, 40, 40, 39, 39, 39, 39, 38, 38, 37, 37, 36]
        for temp in temprange:
            yield temp

    def get_highest_temperature(self):
        """
        Walks through the list of all the drives and compares
        all drive temperatures. The highest drive temperature
        is returned as an integer, representing degrees of Celcius.
        """

        if self.debug:
            if self.temp_generator == None:
                self.temp_generator = self.generate_temperature()
            return self.temp_generator.next()

        data = self.fetch_data()
        temperature = 0
        for controller in data:
            for disk in controller:
                if disk > temperature:
                    temperature = disk
        return int(temperature)

    def get_pwm(self):
        """
        Return the current PWM speed setting.
        """
        filename = self.controlfan
        filehandle = open(filename, 'r')
        pwm_value = int(filehandle.read().strip())
        filehandle.close()
        self.log("Current PWM", pwm_value)
        return pwm_value

    def set_pwm(self, value):
        """
        Sets the fan speed. Only allows values between
        pwm_min and pwm_max. Values outside these ranges
        are set to either pwm_min or pwm_max as a safety
        precaution.
        """
        filename = self.controlfan
        pwm_max = self.pwm_max
        pwm_min = self.pwm_min
        
        value = pwm_max if value > pwm_max else value
        value = pwm_min if value < pwm_min else value

        filehandle = open(filename, 'w')
        self.log("Set PWM value", value)
        filehandle.write(str(value))
        filehandle.close()

    def enable_fan_control(self):
        """
        Tries to enable manual fan speed control."
        """
        filename = self.controlfan
        filehandle = open(filename, 'w')
        try:
            filehandle.write('1')
            filehandle.close()
        except IOError:
            message = "Error enabling filehandlean control."
            self.log(message)

#    def control_fan(self, previous_t):
#        """
#        This function contains the actual logic that governs the fan speed.
#        
#        There is a temperature zone of 'lower_margin' to 'threshold_temperature'
#        that is a 'save zone where no ajustments are made unless the temperature
#        changes. So if the threshold is 40C and the lower_margin is 2C, the 
#        temperatures 38,39 and 40 will not cause a fan speed ajustment. However,
#        if the temperature changes from 38 to 39 degrees (change), fan speed 
#        will be increased. The size of the increment will impact how much the
#        fan speed will be increased (delta_t * pwm_min_delta)
#
#        The size of the fan speed ajustment is based on the temperature distance
#        between the threshold_temperature and the actual temperature like
#        pwm_min_delta * deviation_t. A threshold_temperature of 40 and an actual
#        temperature of 42 would result in a PWM ajust ment of 2 * pwm_min_delta[1]
#        = 10. If the current temperature would be 41, it would be a change of 5. 
#
#        [1] default = 5
#        
#        This is the algorithm:
#
#        1. If the temperature is below lower_margin, no change in fan speed.
#        2. If the temperature is above threshold_temperature, increase the
#           fan speed.
#        3. At this point, the temperature must be between lower_margin and 
#           threshold_temperature. Ajust the fan speed if the temperature is changing 
#           (compare previous temperature with current temperature). 
#        4. If none of the above is true, the temperature is OK and stable. No change
#           in fan speed required.
#
#        The current temperature is returned.
#        """
#        current_t = self.get_highest_temperature()
#        if  previous_t is None:
#            previous_t = current_t
#        delta_t = current_t - previous_t
#
#        pwm_min_delta = self.pwm_min_delta
#        threshold_t = self.threshold_temperature
#        lower_margin = self.lower_margin
#        deviation_t = current_t - threshold_t
#        current_pwm = self.get_pwm()
#
#        self.log("Highest drive temperature", current_t)
#        self.log("Previous temperature", previous_t)
#        self.log("Difference in degrees", delta_t)
#
#
#        pwm_threshold_ajustment = pwm_min_delta * deviation_t 
#        self.log("PWM threshold ajustment is", pwm_threshold_ajustment)
#
#        pwm_delta_ajustment = pwm_min_delta * delta_t 
#        self.log("PWM delta ajustment is", pwm_delta_ajustment)
#
#        new_pwm = current_pwm + pwm_threshold_ajustment + pwm_delta_ajustment 
#        self.log("New PWM is", new_pwm)
#
#        lower_threshold = threshold_t - lower_margin
#        if current_t < lower_threshold:
#            self.log("Temperature is below threshold (fan speed not ajusted)", \
#                    current_t)
#            return current_t
#
#        if current_t > threshold_t:
#            self.log("Temperature is too high, ajust fan speed", current_t)
#            self.set_pwm(new_pwm)
#            return current_t
#
#        if not delta_t == 0:
#            self.log("Temperature is changing, ajust fan speed", delta_t)
#            self.set_pwm(new_pwm)
#            return current_t
#        else:
#            self.log("Temperature is OK (fan speed not ajusted)", current_t )
#            return current_t

    def control_fan(self):
        """
        This function contains the actual logic that governs the fan speed.
        
        There is a temperature zone of 'lower_margin' to 'threshold_temperature'
        that is a 'save zone where no ajustments are made unless the temperature
        changes. So if the threshold is 40C and the lower_margin is 2C, the 
        temperatures 38,39 and 40 will not cause a fan speed ajustment. However,
        if the temperature changes from 38 to 39 degrees (change), fan speed 
        will be increased. The size of the increment will impact how much the
        fan speed will be increased (delta_t * pwm_min_delta)

        The size of the fan speed ajustment is based on the temperature distance
        between the threshold_temperature and the actual temperature like
        pwm_min_delta * deviation_t. A threshold_temperature of 40 and an actual
        temperature of 42 would result in a PWM ajust ment of 2 * pwm_min_delta[1]
        = 10. If the current temperature would be 41, it would be a change of 5. 

        [1] default = 5
        
        This is the algorithm:

        1. If the temperature is below lower_margin, no change in fan speed.
        2. If the temperature is above threshold_temperature, increase the
           fan speed.
        3. At this point, the temperature must be between lower_margin and 
           threshold_temperature. Ajust the fan speed if the temperature is changing 
           (compare previous temperature with current temperature). 
        4. If none of the above is true, the temperature is OK and stable. No change
           in fan speed required.

        The current temperature is returned.
        """
        previous_t = self.previous_temperature
        current_t = self.get_highest_temperature()
        if  previous_t is None:
            previous_t = current_t
        self.previous_temperature = current_t
        delta_t = current_t - previous_t

        pwm_min_delta = self.pwm_min_delta
        threshold_t = self.threshold_temperature
        lower_margin = self.lower_margin

        deviation_t = current_t - threshold_t
        current_pwm = self.get_pwm()

        self.log("Highest drive temperature", current_t)
        self.log("Previous temperature", previous_t)
        self.log("Difference in degrees", delta_t)

        pwm_threshold_ajustment = pwm_min_delta * deviation_t 
        self.log("PWM threshold ajustment is", pwm_threshold_ajustment)

        pwm_delta_ajustment = pwm_min_delta * delta_t 
        self.log("PWM delta ajustment is", pwm_delta_ajustment)

        new_pwm = current_pwm + pwm_threshold_ajustment + pwm_delta_ajustment 
        self.log("New PWM is", new_pwm)

        lower_threshold = threshold_t - lower_margin
        if current_t < lower_threshold:
            #self.log("Temperature is below threshold (fan speed not ajusted)", \
            # current_t)

        if current_t > threshold_t:
            #self.log("Temperature is too high, ajust fan speed", current_t)
            self.set_pwm(new_pwm)
            self.changed_pwm = True

        if not delta_t == 0:
            #self.log("Temperature is changing, ajust fan speed", delta_t)
            self.set_pwm(new_pwm)
            self.changed_pwm = True
        else:
            #self.log("Temperature is OK (fan speed not ajusted)", current_t )

        self.log( previous_t, current_t, delta_t, pwm_threshold_ajustment, pwm_delta_ajustment, new_pwm, self.changed_pwm )

def main():
    """
    Start the loop that runs the control_fan function every 'interval' seconds
    The control_fan function returns the measured temperature, which is stored
    and used to compare the latest temperature with the previous measurement
    to detect an increase or decrease in temperature. This is used for more
    fine-grained fan speed control.
    """
    controller = FanControl()
    try:
        controller.debug = os.environ['DEBUG'] 
        if controller.debug:
            controller.polling_interval = 2
            controller.controlfan = '/tmp/controlfan.txt'
    except (KeyError):
        pass



    try:
        controller.log("* Starting disk fan control.")
        controller.enable_fan_control()
        controller.log("Set fan speed to default value.")
        controller.set_pwm(controller.pwm_default)

        while True:
            controller.log("---")
            controller.control_fan()
            time.sleep(controller.polling_interval)

    except (KeyboardInterrupt, SystemExit):
        controller.set_pwm(controller.pwm_safety)

if __name__ == "__main__":
    main()

